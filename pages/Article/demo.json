{
  "code": 200,
  "msg": "success",
  "data": {
    "markdowncontent": "## 1.\u9009\u7528\u4ec0\u4e48linux\u53d1\u884c\u7248?\n\u5927\u591a\u6570\u6559\u7a0b\u90fd\u4f7f\u7528centos 8,\u4f46\u662fcentos 8\u5df2\u7ecf\u4e0d\u518d\u66f4\u65b0,\u5b98\u65b9\u4e5f\u4e0d\u63d0\u4f9b\u6e90,\u6240\u4ee5\u4f7f\u7528\u4e86\u539f\u4f5c\u8005\u5f00\u53d1\u7684rocky linux 8,\u64cd\u4f5c\u57fa\u672c\u4e00\u6837\n\u4f46\u662f\u6ca1\u6709network service,\u4f7f\u7528ifdown ,if up\u547d\u4ee4\u91cd\u542f\u7f51\u5361;\u7f51\u5361\u914d\u7f6e\u6587\u4ef6\u5728\n\/etc\/sysconfig\/network-script\/ \u8fd9\u4e2a\u76ee\u5f55\u4e0b\u9762\n\n## 2.\u4e0b\u8f7drocky linux8 \u66f4\u6362\u6e90,\u5b89\u88c5docker\n\u4e0b\u8f7d\nhttp:\/\/mirrors.163.com\/rocky\/8.6\/isos\/x86_64\/\n\u66f4\u6362\u6e90\n```bash\nsed -e 's|^mirrorlist=|#mirrorlist=|g' \\\n    -e 's|^#baseurl=http:\/\/dl.rockylinux.org\/$contentdir|baseurl=https:\/\/mirrors.aliyun.com\/rockylinux|g' \\\n    -i.bak \\\n    \/etc\/yum.repos.d\/Rocky-*.repo\n\ndnf makecache\n```\n\u5b89\u88c5docker\nhttps:\/\/www.linuxtechi.com\/install-docker-and-docker-compose-rocky-linux\/\n\n## 3.\u901a\u8fc7docker-compose \u542f\u52a8docker \u955c\u50cf\n\u8bbe\u7f6erestart:always \u8ddf\u968fdocker\u670d\u52a1\u542f\u52a8\n```bash\n#\u542f\u52a8\ndocker-compose up -d\n#\u91cd\u542f\ndocker-compose restart \u540d\u5b57\n#\u67e5\u770b\u65e5\u5fd7\ndocker-compose logs -f \u540d\u5b57\n```\n\n## 4.\u5b89\u88c5gitlab\ndocker search gitlab-ce\n\u7136\u540e\u5c31\u53bb\u5b98\u65b9\u627e\u4e00\u4e2a\u7a33\u5b9a\u7248\u7684\u955c\u50cf\n\u7136\u540epull\u4e0b\u6765,\u5728.\/usr\/local \u4e0b\u9762\u521b\u5efa docker \u76ee\u5f55\n\u7136\u540e\u5728docker \u76ee\u5f55\u521b\u5efa gitlab_docker \u76ee\u5f55\n\u7136\u540e\u5f00\u59cb\u7f16\u5199docker-compose.yml\u6587\u4ef6\n\u793a\u4f8b\n```yaml\n\nservices:\n  gitlab:\n    image: 'gitlab\/gitlab-ce:14.10.4-ce.0'\n    container_name: gitlab\n    restart: always\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http:\/\/192.168.80.133:8929'\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n    ports:\n      - '8929:8929'\n      - '2224:2224'\n    volumes:\n      - '.\/config:\/etc\/gitlab'\n      - '.\/logs:\/var\/log\/gitlab'\n      - '.\/data:\/var\/opt\/gitlab'\n      \n```\n\u7136\u540e\u5728\u90a3\u4e2a\u76ee\u5f55\u4e0b\u9762\u6267\u884cdocker-compse up -d\ndocker-compose logs -f \n\n## 5. \u5b89\u88c5jenkins\n \u57fa\u672c\u4e0a\u548c\u5b89\u88c5gitlab\u4e00\u6837\u7684\n \u4f46\u662f\u9700\u8981\u7ed9data\u76ee\u5f55777\u6743\u9650\uff08\u8fd9\u4e2a\u4e0d\u592a\u61c2\uff0c\u8fd9\u4e2a\u662f\u4ec0\u4e48\u90fd\u884c\uff0c\u53ef\u80fd\u6709\u66f4\u4f4e\u7684\u6743\u9650\u4e5f\u884c\uff09\n ```yaml\n services:\n  jenkins:\n    image: 'jenkins\/jenkins:2.332.3-lts'\n    restart: always\n    container_name: jenkins\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - '.\/data:\/var\/jenkins_home\/'\n      - '\/var\/run\/docker.sock:\/var\/run\/docker.sock'\n      - '\/usr\/bin\/docker:\/usr\/bin\/docker'\n      - '\/etc\/docker\/daemon.json:\/etc\/docker\/daemon.json'\n ```\n      - '\/var\/run\/docker.sock:\/var\/run\/docker.sock'\n      - '\/usr\/bin\/docker:\/usr\/bin\/docker'\n      - '\/etc\/docker\/daemon.json:\/etc\/docker\/daemon.json'\n      \u8fd9\u4e2a\u4e09\u4e2a\u6620\u5c04\u5c31\u53ef\u4ee5\u5728\u8ba9jenkins\u4f7f\u7528\u5bbf\u4e3b\u673a\u4e0a\u7684docker,\u5f97\u7ed9docker.sock\n      # \u7ed9docekr.sock\u66f4\u6362docker\u6240\u6709\u8005\u5230root\n      chown root:root \u6587\u4ef6\u8def\u5f84\n      # \u7ed9docker.sock\u5176\u4ed6\u7528\u6237\u8bfb\u548c\u5199\u7684\u6743\u9650\n      chmod o+rw \u6587\u4ef6\u8def\u5f84\n\n## 6.\u5b89\u88c5sonarqube\n\u9700\u8981\u8bbe\u7f6evm.max_map_count\u53c2\u6570>=262144\uff0c\u5426\u5219\u4f1a\u5728\u542f\u52a8\u65f6\u62a5\u9519\nmax virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n```bash\n#\u4fee\u6539\u6587\u4ef6\nsudo vim \/etc\/sysctl.conf\n#\u6dfb\u52a0\u53c2\u6570\nvm.max_map_count = 262144\n#\u91cd\u65b0\u52a0\u8f7d\/etc\/sysctl.conf\u914d\u7f6e\nsysctl -p\n```\n\u8fd9\u4e2a\u4f30\u8ba1\u662fsonarqbe\u4f7f\u7528\u4e86es\uff0c\n\nsonar-scanner-cli,\u8fd9\u4e2a\u4e3b\u8981\u662f\u914d\u7f6ejenkins\u505a\u4ee3\u7801\u8d28\u91cf\u5206\u6790\n\u4e0b\u8f7d\u5730\u5740\uff1ahttps:\/\/binaries.sonarsource.com\/?prefix=Distribution\/sonar-scanner-cli\/\uff08\u79d1\u5b66\u4e0a\u7f51\uff09\n\u89e3\u538b\u4e4b\u540e\u79fb\u52a8\u5230\u4f60jenkins \/var\/jenkins_home \u6620\u5c04\u7684\u6587\u4ef6\u5939,\u7136\u540e\u8fdb\u5165\u5230\u90a3\u4e2aconf\u76ee\u5f55\n![\u6211\u7684\u8def\u5f84](https:\/\/img-blog.csdnimg.cn\/a2bdaf299add4cefbc3f1a9fecc649fa.png)\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https:\/\/img-blog.csdnimg.cn\/ef53a33cb9084e0a9b023ee41b0d181c.png)\n\u8fd9\u4e2asonar.host.url\u6539\u6210\u4f60\u7684,\u7136\u540e\u542f\u52a8sonarqube\u53bb\u751f\u6210\u4e00\u4e2atoken,\u7136\u540e\u53bb\u914d\u7f6e\u4f60\u7684jenkins\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https:\/\/img-blog.csdnimg.cn\/0801a7abf4e94740998ecd33f750fa7c.png)\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https:\/\/img-blog.csdnimg.cn\/190ccdce08a447b099dc96577f9ee328.png)\n\u8fd9\u91cc\u7684\u914d\u7f6e\u5c31\u5bf9\u5e94\u547d\u4ee4\u91cc\u9762\u7684-Dsonar.source= \u8fd9\u79cd\n\n## 7.\u5b89\u88c5harbor\nhttps:\/\/baijiahao.baidu.com\/s?id=1707816679863571585&wfr=spider&for=pc\n\u53bb\u5b98\u7f51\u4e0b\u8f7d\u4e00\u4e2a\u7a33\u5b9a\u957f\u671f\u7684\u538b\u7f29\u5305\n\u7136\u540e\u89e3\u538b\u5230\/usr\/local\/ \u4e0b\u9762,\u7136\u540e\u914d\u7f6eharbor.yml\n\u5c31\u914d\u7f6e\u4e00\u4e0bhostname: \u4f60\u7684harbor\u4e3b\u673a\u5730\u5740\n\u5173\u95ed443,https.ssl.\u76f8\u5173\u7684\u6240\u6709\u914d\u7f6e.\n\u7136\u540e\u53ef\u4ee5\u770b\u4e0bharbor_admin_password: \u8fd9\u4e2a\u662f\u9ed8\u8ba4\u7ba1\u7406\u5bc6\u7801\n\u7136\u540e\u8fd0\u884cinstall.sh\u5c31\u884c\u4e86\n\u7136\u540e\u628a\u8fd9\u4e2a\u955c\u50cf\u4ed3\u5e93\u52a0\u5165\u5230doker\u91cc\u9762,\u66f4\u6539\u4e00\u4e2a\u6587\u4ef6vi \/etc\/docker\/daemon.json\n\n{\n  \"insecure-registries\": [\"192.168.80.137:80\"]\n}\n\u8fd9\u6837\u7136\u540e\u53bb\u6bcf\u6b21\u62c9\u53d6\u6216\u8005\u63a8\u9001,\u4f7f\u7528\u5b83\u7684\u683c\u5f0f\u5c31\u884c\u4e86\n\n## 8.\u4f7f\u7528jenkins\u6784\u5efadocker\u955c\u50cf\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https:\/\/img-blog.csdnimg.cn\/b542d442456e400783d5a6755ea86637.png)\n\n\u81ea\u7531\u98ce\u683c(___)\n\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u914d\u7f6e\u4e00\u4e0bdocker\u6784\u5efa\u7684\u547d\u4ee4,\u7136\u540epush\u5230harbor\u4ed3\u5e93\u91cc\u9762\n```bash\nmv target\/*.jar docker\/\ndocker image prune -f\ndocker build -t test:$tag docker\/\ndocker login -u admin -p Harbor12345 192.168.80.137:80\ndocker tag test:$tag 192.168.80.137:80\/repo\/test:$tag\ndocker push 192.168.80.137:80\/repo\/test:$tag\n```\n\u7136\u540e\u5c31\u662f\u9700\u8981\u90e8\u7f72\u7684\u670d\u52a1\u5668\u6536\u5230jenkins\u6784\u5efa\u5b8c\u6210\u7684\u901a\u77e5\u7136\u540e\u8fd0\u884c\u90e8\u7f72\u955c\u50cf\u7684\u811a\u672c\n```bash\n# \u63a5\u53d7\u53c2\u6570\nhorbar_addr=$1\nhorbar_repo=$2\nproject=$3\nversion=$4\nhost_port=$5\ncontainer_port=$6\n\nimageName=$horbar_addr\/$horbar_repo\/$project\n\necho $project\necho $imageName\n\ncontainerId=`docker ps -a | grep ${project} | awk '{print $1}'`\n\necho $containerId\n# \u5224\u65ad\u8981\u90e8\u7f72\u7684\u5bb9\u5668\u662f\u5426\u5728\u8fd0\u884c,\u662f\u5c31\u5220\u9664\u5b83\nif [ \"$containerId\" != \"\" ] ; then\n  docker stop $containerId\n  docker rm $containerId\nfi\n\ntag=`docker images | grep ${imageName} | awk '{print $2}'`\n\necho $tag\n\necho \"$imageName:$version\"\n# \u5224\u65ad\u62c9\u53d6\u7684\u955c\u50cf\u662f\u5426\u5b58\u5728,\u5b58\u5728\u5c31\u5220\u9664\nif [[ \"$tag\" =~ \"$version\" ]] ; then\n  docker rmi -f  \"$imageName:$version\"\nfi\n# \u767b\u5f55\u5230harhor\u955c\u50cf\u4ed3\u5e93\ndocker login -u admin -p Harbor12345 $horbar_addr\n\ndocker pull \"$imageName:$version\"\necho $project\ndocker run -d -p $host_port:$container_port --name $project \"$imageName:$version\" \\\n&& echo \"SUCCESS\"\n\n```\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https:\/\/img-blog.csdnimg.cn\/d8f2722a7610405da585b80ee49da07b.png)\n\n## 9.\u5b89\u88c5k8s\n\u6559\u7a0bhttps:\/\/kuboard.cn\/install\/history-k8s\/install-k8s-1.22.x.html\n\u5e38\u7528\u547d\u4ee4\n```bash\n# \u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u542f\u52a8\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\nkubectl apply -y \u4f60\u7684\u914d\u7f6e\u6587\u4ef6\n# \u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5220\u9664\u4f60\u7684\u914d\u7f6e\u6587\u4ef6\nkubectl delete -y \u4f60\u7684\u914d\u7f6e\u6587\u4ef6\n# \u67e5\u770bnamespace\nkubectl get ns\n# \u67e5\u770bpod\u8be6\u60c5\nkubectl describe podName -n namespace\n\n\n\n```\n\njenkins \u5fc5\u88c5\u63d2\u4ef6\uff08\u6211\u4e5f\u662f\u521a\u5b66\uff0c\u4e0d\u592a\u61c2\uff09\n- \n- publish over ssh\n- sonarqube scanner\n- git\n\n \njenkins \u8bbe\u7f6e\u65f6\u533a\ndocker exec -it -u root jenkins bash\n\u7136\u540ecp \/usr\/share\/zoneinfo\/Asia\/Shanghai \/etc\/localtime\n\n\n\n## \u914d\u7f6e\u6784\u5efa\u670d\u52a1\u5668\n\u5b89\u88c5jdk8 \u89e3\u538b\u5230\/usr\/local\/jdk8 \u5176\u4ed6\u4e5f\u884c,\u7136\u540e\u53bbjenkins\u914d\u7f6e\u4e00\u4e0b\n\u5b89\u88c5maven \u89e3\u538b\u5230\/usr\/local\/maven \u5176\u4ed6\u4e5f\u884c,\u7136\u540e\u53bbjenkins\u914d\u7f6e\u4e00\u4e0b\n\n"
  }
}
